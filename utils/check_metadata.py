#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ SQLAlchemy metadata.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –º–æ–¥–µ–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –≤ Base.metadata
–ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —á–µ—Ä–µ–∑ –º–µ—Ö–∞–Ω–∏–∑–º DeclarativeBase.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python utils/check_metadata.py
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, project_root)

print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π –≤ SQLAlchemy metadata")
print("=" * 60)

print("\n1. –°–æ—Å—Ç–æ—è–Ω–∏–µ metadata –î–û –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π:")
from app.infra.db.base import Base
print(f"   üìã –¢–∞–±–ª–∏—Ü—ã –≤ metadata: {list(Base.metadata.tables.keys())}")
print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(Base.metadata.tables)}")

print("\n2. ‚ö° –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏...")
from app.tasks.models import Task
from app.infra.db.sessions import UserSession

print("3. –°–æ—Å—Ç–æ—è–Ω–∏–µ metadata –ü–û–°–õ–ï –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π:")
print(f"   üìã –¢–∞–±–ª–∏—Ü—ã –≤ metadata: {list(Base.metadata.tables.keys())}")
print(f"   üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(Base.metadata.tables)}")

print("\n4. üìù –î–µ—Ç–∞–ª–∏ —Ç–∞–±–ª–∏—Ü:")
for table_name, table in Base.metadata.tables.items():
    print(f"   - üóÇÔ∏è  {table_name}:")
    print(f"     ‚Ä¢ {len(table.columns)} –∫–æ–ª–æ–Ω–æ–∫")
    print(f"     ‚Ä¢ {len(table.indexes)} –∏–Ω–¥–µ–∫—Å–æ–≤")
    print(f"     ‚Ä¢ {len([c for c in table.columns if c.primary_key])} –ø–µ—Ä–≤–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π")
    print(f"     ‚Ä¢ {len([c for c in table.columns if c.foreign_keys])} –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π")

print("\n5. üìã –ö–æ–ª–æ–Ω–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º:")
for table_name, table in Base.metadata.tables.items():
    print(f"\n   üóÇÔ∏è  {table_name}:")
    for column in table.columns:
        pk = " (PK)" if column.primary_key else ""
        fk = " (FK)" if column.foreign_keys else ""
        nullable = "NULL" if column.nullable else "NOT NULL"
        print(f"     ‚Ä¢ {column.name}: {column.type} {nullable}{pk}{fk}")

print("\n" + "=" * 60)
print("‚úÖ –í—ã–≤–æ–¥: –ò–º–ø–æ—Ä—Ç 'from app.tasks.models import Task' –∏ 'from app.infra.db.sessions import UserSession'")
print("   –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª–∏ –≤ Base.metadata")
